{"name":"Lolapi","tagline":"League of Legends Api Wrapper","body":"#Lolapi\r\n##League of Legends Api Wrapper\r\nThis library allows you to calls to the RIOT API with a proper API Key.\r\nSimply replace API_KEY_HERE with your API key from Riot Games. If you don't have a key you can get one from [here](developer.riotgames.com).\r\n\r\n_This is still a work in progress._\r\n\r\n##Installation\r\nUse composer!\r\n\r\n##Usage\r\n\r\nInitialize the Api\r\n\r\n``$api = new Lolapi('API_KEY_HERE');``\r\n\r\nSet the Api you want to use.\r\nValid Choices:\r\n\r\n- Champion\r\n- Game\r\n- History\r\n- League\r\n- Match\r\n- StaticData\r\n- Stats\r\n- Status\r\n- Summoner\r\n- Team\r\n\r\nFor example to get the Summoner details\r\nyou can do something like this.\r\n\r\n```\r\n\t$api->Summoner()->byName('remataklan'));\r\n// or\r\n\t$summoner = new Summoner;\r\n\t$remataklan = $summoner->byName('remataklan')\r\n\r\n```\r\n\r\nYou should get an array containing the summoner details.\r\n\r\n\r\n##APIs\r\n###Champion\r\nGet the Champion data from the api. This returns current champion info. \r\n\r\nGet all the champions:\r\n\r\n``$api->Champion()->all()``\r\n\r\nGet a champion by its id:\r\n\r\n``$api->Champion()->byId($id)``\r\n\r\n###Game\r\nGet recent games for a player by that players id. (Max 10 Games returned by Riot)\r\n\r\n``$api->Game()->recent()``\r\n\r\n###History\r\nRetrieve match history by summoner ID. You can query multiple summoners.\r\n\r\nSimple call: \r\nYou can send a single id to query a single Summoner.\r\n\r\n``$api->History()->get($id)``\r\n\r\nParameters are sent as an array, Array key and values are listed below:\r\n\r\n- championIds (ids of champions to filter)\r\n- rankedQueues (valid options: RANKED_SOLO_5x5, RANKED_TEAM_3x3, RANKED_TEAM_5x5)\r\n- beginIndex: The begin index to use for fetching games. \r\n- endIndex: The begin index to use for fetching games.\r\n\r\n\r\n```\r\n$params = ['championIds' => 1, 'rankedQueues' => 'RANKED_SOLO_5x5'];\r\n$api->History()->get($id, $params);\r\n```\r\n\r\n###League\r\nGet various league information.\r\n\r\nGet leagues mapped by summoner ID for a given list of summoner IDs.\r\n\r\n#####By Summoner or Team\r\n$ids: a single Summoner or Team id or an array of integers for multiple ids:\r\n\r\n``$this->League()->bySummoner($ids);``\r\n\r\n``$this->League()->byTeam($ids);``\r\n\r\n##### By Summoner or Team Entry\r\nGet leagues mapped by team ID for a given list of team IDs or Summoner IDs.\r\n\r\n``$this->League()->entryBySummoner($ids);``\r\n\r\n``$this->League()->entryByTeam($ids);``\r\n\r\n\r\n###Match\r\nGet match details for a given match.\r\n\r\n``$this->match()->detail($id);``\r\n\r\nor you can supply a second parameter (bool) to ask for timeline. Not all matches have timeline info.\r\n\r\n``$this->match()->detail($id, true);``\r\n\r\n###StaticData\r\nAll static data from riot are queried using this method. This method's api calls does not count toward your rate limit.\r\n\r\n#####Champion\r\nGet static data about a champion. The following will get all champions with default parameter.\r\n\r\n``$api->StaticData()->champion();``\r\n\r\nTo get a specific champion with default parameters: \r\n\r\n```\r\n// Note that you must supply an empty array for default \r\n// parameters when requesting a specific champion\r\n\r\n$api->StaticData()->champion([], $id);\r\n```\r\n\r\nValid $params, You can pass them as array key/value pairs\r\n\r\n- locale\r\n- version\r\n- dataById (TRUE or FALSE - Only for all champs)\r\n- champData ['allytips', 'altimages', 'blurb', 'enemytips', 'image', 'info', 'lore', 'partype', 'passive', 'recommended', 'skins', 'spells', 'stats', 'tags']\r\n\r\n```\r\n// Note that if you want more than one champData param\r\n// you can pass it as a comma separated string\r\n\r\n$api->StaticData()->champion(['champData' => 'allytips, lore'])\r\n```\r\n\r\n#####Item\r\nGet static data about an item. The following will get all items with default parameter.\r\n\r\n``$api->StaticData()->item();``\r\n\r\nTo get a specific item with default parameters: \r\n\r\n```\r\n// Note that you must supply an empty array for default \r\n// parameters when requesting a specific item\r\n\r\n$api->StaticData()->item([], $id);\r\n```\r\n\r\nValid $params, You can pass them as array key/value pairs\r\n\r\n- locale\r\n- version\r\n- itemListData ['all', 'colloq', 'consumeOnFull', 'consumed', 'depth', 'from', 'gold', 'groups', 'hideFromAll', 'image', 'inStore', 'into', 'maps', 'requiredChampion', 'sanitizedDescription', 'specialRecipe', 'stacks', 'stats', 'tags', 'tree']\r\n\r\n```\r\n// Note that if you want more than one itemlistData param\r\n// you can pass it as a comma separated string\r\n\r\n$api->StaticData()->item(['itemListData' => 'image, inStore'])\r\n```\r\n\r\n#####Mastery\r\nGet static data about an item. The following will get all masteries with default parameter.\r\n\r\n``$api->StaticData()->mastery();``\r\n\r\nTo get a specific item with default parameters: \r\n\r\n```\r\n// Note that you must supply an empty array for default \r\n// parameters when requesting a specific mastery\r\n\r\n$api->StaticData()->mastery([], $id);\r\n```\r\n\r\nValid $params, You can pass them as array key/value pairs\r\n\r\n- locale\r\n- version\r\n- masteryListData ['all', 'image', 'prereq', 'ranks', 'sanitizedDescription', 'tree']\r\n\r\n```\r\n// Note that if you want more than one masterylistData param\r\n// you can pass it as a comma separated string\r\n\r\n$api->StaticData()->mastery(['maseryListData' => 'image, ranks'])\r\n```\r\n\r\n#####Realm\r\nRetrieve realm data.\r\n\r\n``$api->StaticData()->realm();``\r\n\r\n#####Summoner Spells\r\nGet static data about a summoner spell. The following will get all spells with default parameter.\r\n\r\n``$api->StaticData()->summonerSpell();``\r\n\r\nTo get a specific spell with default parameters: \r\n\r\n```\r\n// Note that you must supply an empty array for default \r\n// parameters when requesting a specific spell\r\n\r\n$api->StaticData()->summonerSpell([], $id);\r\n```\r\n\r\nValid $params, You can pass them as array key/value pairs\r\n\r\n- locale\r\n- version\r\n- dataById (TRUE or FALSE - Only for all champs)\r\n- spellData ['all', 'cooldown', 'cooldownBurn', 'cost', 'costBurn', 'costType', 'effect', 'effectBurn', 'image', 'key', 'leveltip', 'maxrank', 'modes', 'range', 'rangeBurn', 'resource', 'sanitizedDescription', 'sanitizedTooltip', 'tooltip', 'vars']\r\n\r\n\r\n```\r\n// Note that if you want more than one spellData param\r\n// you can pass it as a comma separated string\r\n\r\n$api->StaticData()->summonerSpell(['spellData' => 'cooldown, tooltip'])\r\n```\r\n\r\n#####Runes\r\nGet static data about a rune. The following will get all runes with default parameter.\r\n\r\n``$api->StaticData()->rune();``\r\n\r\nTo get a specific rune with default parameters: \r\n\r\n```\r\n// Note that you must supply an empty array for default \r\n// parameters when requesting a specific mastery\r\n\r\n$api->StaticData()->rune([], $id);\r\n```\r\n\r\nValid $params, You can pass them as array key/value pairs\r\n\r\n- locale\r\n- version\r\n- runeListData ['all', 'basic', 'colloq', 'consumeOnFull', 'consumed', 'depth', 'from', 'gold', 'hideFromAll', 'image', 'inStore', 'into', 'maps', 'requiredChampion', 'sanitizedDescription', 'specialRecipe', 'stacks', 'stats', 'tags']\r\n\r\n```\r\n// Note that if you want more than one masterylistData param\r\n// you can pass it as a comma separated string\r\n\r\n$api->StaticData()->mastery(['maseryListData' => 'image, ranks'])\r\n```\r\n\r\n#####Versions\r\nRetrieve version data.\r\n\r\n``$api->StaticData()->versions();``\r\n\r\n###Stats\r\nGet Summoner stats. You can omit $season to get the latest season.\r\n\r\nGet ranked stats by summoner ID.\r\n\r\n``$api->Stats()->ranked($id, $season);``\r\n\r\nGet player stats summaries by summoner ID.\r\n\r\n``$api->Stats()->summary($id, $seson);``\r\n\r\n###Status\r\nGet shard list: \r\n\r\n``$api->Status()->shards();``\r\n\r\nGet shard status. Returns the data available on the status.leagueoflegends.com website for the given region. \r\n\r\n``$api->Status()->shards('na')``;\r\n\r\n###Summoner\r\nGet info about a summoner.\r\n\r\n``$api->Summoner()->get($id);``\r\n\r\nAbove method call will get info about a summoner. You can pass an array as parameter. This array can contain both names (strings) and ids (integers)\r\n\r\nFor example:\r\n\r\nThis query will get both user named remataklan and user with id 343443:\r\n\r\n``$api->Summoner()->get(['remataklan', 343443]);``\r\n\r\n#####runes\r\nGet runes pages by summoners IDs. A single integer or an array of integers as parameters:\r\n\r\n``$api->Summoner()->runes($ids)``\r\n\r\n#####masteries\r\nGet runes pages by masteries IDs. A single integer or an array of integers as parameters:\r\n\r\n``$api->Summoner()->masteries($ids)``\r\n\r\n####name\r\nGet summoner names mapped by summoner ID for a given list of summoner IDs. A single integer or an array of integers as parameters:\r\n\r\n``$api->Summoner()->name($ids)``\r\n\r\n###Team\r\nGet teams mapped by summoner ID for a given list of summoner IDs. \r\n\r\n``$api->Team()->bySummoner($ids)``\r\n\r\nGet teams mapped by team ID for a given list of team IDs.\r\n\r\n``$api->Team()->teams($teamIds);``\r\n\r\nA single integer or an array of integers as parameters for both methods.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}